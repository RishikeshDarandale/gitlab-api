/**
 *
 * plugins
 *
 */
buildscript {
  repositories {
    mavenCentral()
    jcenter()
  }
  dependencies {
    classpath("net.researchgate:gradle-release:2.3.5")
  }
}


apply plugin: 'idea'
apply plugin: 'java'
apply plugin: 'maven'
/**
 *
 * Gradle release plugin[1]
 *
 * This plugin does the same job as maven-release-plugin[2].
 *
 * [1] https://github.com/researchgate/gradle-release
 * [2] http://maven.apache.org/maven-release/maven-release-plugin/
 */
apply plugin: 'net.researchgate.release'

/**
 *
 * Dependencies
 *
 */
dependencies {
  compile(group: 'com.google.guava', name: 'guava', version:'19.0')
  compile(group: 'org.glassfish.jersey.core', name: 'jersey-client', version: '2.22.2')
  compile(group: 'org.glassfish.jersey.media', name: 'jersey-media-json-jackson', version:'2.22.2')

  testCompile(group: 'junit', name: 'junit', version:'4.12')
  testCompile(group: 'org.mockito', name: 'mockito-core', version:'1.10.19')
  testCompile(group: 'org.powermock', name: 'powermock-release-with-junit-mockito-dependencies', version:'1.6.2')
}

/**
 *
 * publish
 *
 */
repositories {
  mavenCentral()
  mavenLocal()
}

uploadArchives {
  repositories {
    mavenDeployer {
      // TODO: Update the actual artifactory url
      repository(url: "file://${System.properties['user.home']}/.m2/repository")
      pom.project {
        groupId = project.group
        artifactId = archivesBaseName
        version = project.version
      }
    }
  }
}

/**
 *
 * Release
 *
 * Release process can be triggered using following command
 *
 * $gradle release -Prelease.useAutomaticVersion=true
 *
 */
release {
  tagTemplate = '${version}'
  preCommitText = '[GitLab-API] - '
  preTagCommitMessage = 'Creating tag with release version: '
  tagCommitMessage = 'Creating tag: '
  newVersionCommitMessage = 'Next development version: '
}

afterReleaseBuild.dependsOn uploadArchives


/**
 *
 * Enforce java
 *
 */
task enforceVersion << {
    def foundVersion = JavaVersion.current();
    println "Current Java version detected: " + foundVersion.toString().toFloat();
    println "Required Java version needed: "  + sourceCompatibility.toFloat();
    if (foundVersion.toString().toFloat() < sourceCompatibility.toFloat()) 
        throw new IllegalStateException("Wrong Java version; required is "
            + sourceCompatibility + ", but found " + foundVersion);
}

compileJava.dependsOn(enforceVersion);
